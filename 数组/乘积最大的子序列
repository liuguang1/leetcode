
1.给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。

示例 1:

输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
示例 2:

输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。
# 前 n 位的乘积最大子序列分以下3种情况：

# 1. 前n - 1位的乘积最小子序列的乘积 * A[n]最大

# 2. 前n - 1位的乘积最大子序列的乘积 * A[n]最大

# 3. 前n - 1位的乘积最大子序列和乘积最小子序列的乘积 * A[n]都不是最大，而A[n]本身最大。
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        res=nums[0]
        min_,max_=nums[0],nums[0]
        for item in nums[1:]:
            min_,max_=min(item,min_*item,max_*item),max(item,min_*item,max_*item)
            res=max(res,max_)
        return res
    
